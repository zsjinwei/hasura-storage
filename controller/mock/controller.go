// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -destination mock/controller.go -package mock -source=controller.go MetadataStorage
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	http "net/http"
	httputil "net/http/httputil"
	reflect "reflect"
	time "time"

	controller "github.com/nhost/hasura-storage/controller"
	gomock "go.uber.org/mock/gomock"
)

// MockMetadataStorage is a mock of MetadataStorage interface.
type MockMetadataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataStorageMockRecorder
}

// MockMetadataStorageMockRecorder is the mock recorder for MockMetadataStorage.
type MockMetadataStorageMockRecorder struct {
	mock *MockMetadataStorage
}

// NewMockMetadataStorage creates a new mock instance.
func NewMockMetadataStorage(ctrl *gomock.Controller) *MockMetadataStorage {
	mock := &MockMetadataStorage{ctrl: ctrl}
	mock.recorder = &MockMetadataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataStorage) EXPECT() *MockMetadataStorageMockRecorder {
	return m.recorder
}

// DeleteFileByID mocks base method.
func (m *MockMetadataStorage) DeleteFileByID(ctx context.Context, fileID string, headers http.Header) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileByID", ctx, fileID, headers)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// DeleteFileByID indicates an expected call of DeleteFileByID.
func (mr *MockMetadataStorageMockRecorder) DeleteFileByID(ctx, fileID, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileByID", reflect.TypeOf((*MockMetadataStorage)(nil).DeleteFileByID), ctx, fileID, headers)
}

// GetBucketByID mocks base method.
func (m *MockMetadataStorage) GetBucketByID(ctx context.Context, id string, headers http.Header) (controller.BucketMetadata, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketByID", ctx, id, headers)
	ret0, _ := ret[0].(controller.BucketMetadata)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// GetBucketByID indicates an expected call of GetBucketByID.
func (mr *MockMetadataStorageMockRecorder) GetBucketByID(ctx, id, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketByID", reflect.TypeOf((*MockMetadataStorage)(nil).GetBucketByID), ctx, id, headers)
}

// GetFileByID mocks base method.
func (m *MockMetadataStorage) GetFileByID(ctx context.Context, id string, headers http.Header) (controller.FileMetadata, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByID", ctx, id, headers)
	ret0, _ := ret[0].(controller.FileMetadata)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// GetFileByID indicates an expected call of GetFileByID.
func (mr *MockMetadataStorageMockRecorder) GetFileByID(ctx, id, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByID", reflect.TypeOf((*MockMetadataStorage)(nil).GetFileByID), ctx, id, headers)
}

// GetFilesByETag mocks base method.
func (m *MockMetadataStorage) GetFilesByETag(ctx context.Context, etag string, headers http.Header) ([]controller.FileMetadata, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesByETag", ctx, etag, headers)
	ret0, _ := ret[0].([]controller.FileMetadata)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// GetFilesByETag indicates an expected call of GetFilesByETag.
func (mr *MockMetadataStorageMockRecorder) GetFilesByETag(ctx, etag, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesByETag", reflect.TypeOf((*MockMetadataStorage)(nil).GetFilesByETag), ctx, etag, headers)
}

// InitializeFile mocks base method.
func (m *MockMetadataStorage) InitializeFile(ctx context.Context, id, name string, size int64, bucketID, mimeType, objectKey string, chunkSize, chunkCount int64, uploadId string, headers http.Header) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeFile", ctx, id, name, size, bucketID, mimeType, objectKey, chunkSize, chunkCount, uploadId, headers)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// InitializeFile indicates an expected call of InitializeFile.
func (mr *MockMetadataStorageMockRecorder) InitializeFile(ctx, id, name, size, bucketID, mimeType, objectKey, chunkSize, chunkCount, uploadId, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeFile", reflect.TypeOf((*MockMetadataStorage)(nil).InitializeFile), ctx, id, name, size, bucketID, mimeType, objectKey, chunkSize, chunkCount, uploadId, headers)
}

// InsertVirus mocks base method.
func (m *MockMetadataStorage) InsertVirus(ctx context.Context, fileID, filename, virus string, userSession map[string]any, headers http.Header) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVirus", ctx, fileID, filename, virus, userSession, headers)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// InsertVirus indicates an expected call of InsertVirus.
func (mr *MockMetadataStorageMockRecorder) InsertVirus(ctx, fileID, filename, virus, userSession, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVirus", reflect.TypeOf((*MockMetadataStorage)(nil).InsertVirus), ctx, fileID, filename, virus, userSession, headers)
}

// ListFiles mocks base method.
func (m *MockMetadataStorage) ListFiles(ctx context.Context, headers http.Header) ([]controller.FileSummary, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, headers)
	ret0, _ := ret[0].([]controller.FileSummary)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockMetadataStorageMockRecorder) ListFiles(ctx, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockMetadataStorage)(nil).ListFiles), ctx, headers)
}

// PopulateMetadata mocks base method.
func (m *MockMetadataStorage) PopulateMetadata(ctx context.Context, id, name string, size int64, bucketID, etag string, IsUploaded bool, mimeType, objectKey string, chunkSize, chunkCount int64, uploadId string, metadata map[string]any, headers http.Header) (controller.FileMetadata, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateMetadata", ctx, id, name, size, bucketID, etag, IsUploaded, mimeType, objectKey, chunkSize, chunkCount, uploadId, metadata, headers)
	ret0, _ := ret[0].(controller.FileMetadata)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// PopulateMetadata indicates an expected call of PopulateMetadata.
func (mr *MockMetadataStorageMockRecorder) PopulateMetadata(ctx, id, name, size, bucketID, etag, IsUploaded, mimeType, objectKey, chunkSize, chunkCount, uploadId, metadata, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateMetadata", reflect.TypeOf((*MockMetadataStorage)(nil).PopulateMetadata), ctx, id, name, size, bucketID, etag, IsUploaded, mimeType, objectKey, chunkSize, chunkCount, uploadId, metadata, headers)
}

// SetIsUploaded mocks base method.
func (m *MockMetadataStorage) SetIsUploaded(ctx context.Context, fileID string, isUploaded bool, headers http.Header) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsUploaded", ctx, fileID, isUploaded, headers)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// SetIsUploaded indicates an expected call of SetIsUploaded.
func (mr *MockMetadataStorageMockRecorder) SetIsUploaded(ctx, fileID, isUploaded, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsUploaded", reflect.TypeOf((*MockMetadataStorage)(nil).SetIsUploaded), ctx, fileID, isUploaded, headers)
}

// MockContentStorage is a mock of ContentStorage interface.
type MockContentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockContentStorageMockRecorder
}

// MockContentStorageMockRecorder is the mock recorder for MockContentStorage.
type MockContentStorageMockRecorder struct {
	mock *MockContentStorage
}

// NewMockContentStorage creates a new mock instance.
func NewMockContentStorage(ctrl *gomock.Controller) *MockContentStorage {
	mock := &MockContentStorage{ctrl: ctrl}
	mock.recorder = &MockContentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentStorage) EXPECT() *MockContentStorageMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockContentStorage) AbortMultipartUpload(ctx context.Context, filepath, uploadId string) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUpload", ctx, filepath, uploadId)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockContentStorageMockRecorder) AbortMultipartUpload(ctx, filepath, uploadId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockContentStorage)(nil).AbortMultipartUpload), ctx, filepath, uploadId)
}

// CompleteMultipartUpload mocks base method.
func (m *MockContentStorage) CompleteMultipartUpload(ctx context.Context, filepath, uploadId string) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", ctx, filepath, uploadId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockContentStorageMockRecorder) CompleteMultipartUpload(ctx, filepath, uploadId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockContentStorage)(nil).CompleteMultipartUpload), ctx, filepath, uploadId)
}

// CreateGetObjectPresignedURL mocks base method.
func (m *MockContentStorage) CreateGetObjectPresignedURL(ctx context.Context, filepath string, expire time.Duration) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGetObjectPresignedURL", ctx, filepath, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// CreateGetObjectPresignedURL indicates an expected call of CreateGetObjectPresignedURL.
func (mr *MockContentStorageMockRecorder) CreateGetObjectPresignedURL(ctx, filepath, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGetObjectPresignedURL", reflect.TypeOf((*MockContentStorage)(nil).CreateGetObjectPresignedURL), ctx, filepath, expire)
}

// CreateMultipartUpload mocks base method.
func (m *MockContentStorage) CreateMultipartUpload(ctx context.Context, filepath, contentType string) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipartUpload", ctx, filepath, contentType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// CreateMultipartUpload indicates an expected call of CreateMultipartUpload.
func (mr *MockContentStorageMockRecorder) CreateMultipartUpload(ctx, filepath, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipartUpload", reflect.TypeOf((*MockContentStorage)(nil).CreateMultipartUpload), ctx, filepath, contentType)
}

// CreatePutObjectPresignedURL mocks base method.
func (m *MockContentStorage) CreatePutObjectPresignedURL(ctx context.Context, filepath, contentType string, expire time.Duration) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePutObjectPresignedURL", ctx, filepath, contentType, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// CreatePutObjectPresignedURL indicates an expected call of CreatePutObjectPresignedURL.
func (mr *MockContentStorageMockRecorder) CreatePutObjectPresignedURL(ctx, filepath, contentType, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePutObjectPresignedURL", reflect.TypeOf((*MockContentStorage)(nil).CreatePutObjectPresignedURL), ctx, filepath, contentType, expire)
}

// CreateUploadPartPresignedURL mocks base method.
func (m *MockContentStorage) CreateUploadPartPresignedURL(ctx context.Context, filepath, uploadId string, partNumber int32, expire time.Duration) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadPartPresignedURL", ctx, filepath, uploadId, partNumber, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// CreateUploadPartPresignedURL indicates an expected call of CreateUploadPartPresignedURL.
func (mr *MockContentStorageMockRecorder) CreateUploadPartPresignedURL(ctx, filepath, uploadId, partNumber, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadPartPresignedURL", reflect.TypeOf((*MockContentStorage)(nil).CreateUploadPartPresignedURL), ctx, filepath, uploadId, partNumber, expire)
}

// DeleteFile mocks base method.
func (m *MockContentStorage) DeleteFile(ctx context.Context, filepath string) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filepath)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockContentStorageMockRecorder) DeleteFile(ctx, filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockContentStorage)(nil).DeleteFile), ctx, filepath)
}

// GetFile mocks base method.
func (m *MockContentStorage) GetFile(ctx context.Context, filepath string, headers http.Header) (*controller.File, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, filepath, headers)
	ret0, _ := ret[0].(*controller.File)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockContentStorageMockRecorder) GetFile(ctx, filepath, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockContentStorage)(nil).GetFile), ctx, filepath, headers)
}

// GetFileWithPresignedURL mocks base method.
func (m *MockContentStorage) GetFileWithPresignedURL(ctx context.Context, filepath, signature string, headers http.Header) (*controller.File, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileWithPresignedURL", ctx, filepath, signature, headers)
	ret0, _ := ret[0].(*controller.File)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// GetFileWithPresignedURL indicates an expected call of GetFileWithPresignedURL.
func (mr *MockContentStorageMockRecorder) GetFileWithPresignedURL(ctx, filepath, signature, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileWithPresignedURL", reflect.TypeOf((*MockContentStorage)(nil).GetFileWithPresignedURL), ctx, filepath, signature, headers)
}

// ListFiles mocks base method.
func (m *MockContentStorage) ListFiles(ctx context.Context) ([]string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockContentStorageMockRecorder) ListFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockContentStorage)(nil).ListFiles), ctx)
}

// ListParts mocks base method.
func (m *MockContentStorage) ListParts(ctx context.Context, filepath, uploadId string) ([]controller.MultipartFragment, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParts", ctx, filepath, uploadId)
	ret0, _ := ret[0].([]controller.MultipartFragment)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockContentStorageMockRecorder) ListParts(ctx, filepath, uploadId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockContentStorage)(nil).ListParts), ctx, filepath, uploadId)
}

// PutFile mocks base method.
func (m *MockContentStorage) PutFile(ctx context.Context, content io.ReadSeeker, filepath, contentType string) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFile", ctx, content, filepath, contentType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// PutFile indicates an expected call of PutFile.
func (mr *MockContentStorageMockRecorder) PutFile(ctx, content, filepath, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockContentStorage)(nil).PutFile), ctx, content, filepath, contentType)
}

// PutFileWithPresignedURL mocks base method.
func (m *MockContentStorage) PutFileWithPresignedURL(ctx context.Context, filepath, signature string, headers http.Header) (*httputil.ReverseProxy, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileWithPresignedURL", ctx, filepath, signature, headers)
	ret0, _ := ret[0].(*httputil.ReverseProxy)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// PutFileWithPresignedURL indicates an expected call of PutFileWithPresignedURL.
func (mr *MockContentStorageMockRecorder) PutFileWithPresignedURL(ctx, filepath, signature, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileWithPresignedURL", reflect.TypeOf((*MockContentStorage)(nil).PutFileWithPresignedURL), ctx, filepath, signature, headers)
}

// UploadPart mocks base method.
func (m *MockContentStorage) UploadPart(ctx context.Context, filepath, uploadId string, partNumber int32, body io.ReadSeeker) (string, *controller.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPart", ctx, filepath, uploadId, partNumber, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*controller.APIError)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockContentStorageMockRecorder) UploadPart(ctx, filepath, uploadId, partNumber, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockContentStorage)(nil).UploadPart), ctx, filepath, uploadId, partNumber, body)
}

// MockAntivirus is a mock of Antivirus interface.
type MockAntivirus struct {
	ctrl     *gomock.Controller
	recorder *MockAntivirusMockRecorder
}

// MockAntivirusMockRecorder is the mock recorder for MockAntivirus.
type MockAntivirusMockRecorder struct {
	mock *MockAntivirus
}

// NewMockAntivirus creates a new mock instance.
func NewMockAntivirus(ctrl *gomock.Controller) *MockAntivirus {
	mock := &MockAntivirus{ctrl: ctrl}
	mock.recorder = &MockAntivirusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAntivirus) EXPECT() *MockAntivirusMockRecorder {
	return m.recorder
}

// ScanReader mocks base method.
func (m *MockAntivirus) ScanReader(r io.ReaderAt) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanReader", r)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// ScanReader indicates an expected call of ScanReader.
func (mr *MockAntivirusMockRecorder) ScanReader(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanReader", reflect.TypeOf((*MockAntivirus)(nil).ScanReader), r)
}
